# Common steps to build and test against the latest stable version of Rust
test_stable_template: &TEST_STABLE_TEMPLATE
  add_components_script: rustup component add clippy rustfmt
  rustfmt_script: cargo fmt --all -- --check
  clippy_script: cargo clippy --all-targets --all-features --all -- -D warnings -W clippy::pedantic
  test_stable_script: cargo test --all-features --all-targets --all

test_nightly_template: &TEST_NIGHTLY_TEMPLATE
  test_nightly_script: cargo +nightly test --all-features --all-targets --all

# Linux
task:
  name: Linux
  matrix:
    - container:
        image: rust:latest
      <<: *TEST_STABLE_TEMPLATE
    - container:
        image: rustlang/rust:nightly
      <<: *TEST_NIGHTLY_TEMPLATE

# Windows
task:
  name: Windows
  windows_container:
    image: cirrusci/windowsservercore:cmake
    os_version: 2019
  env:
    PATH: $PATH;$USERPROFILE\.cargo\bin
  install_stable_script:
    - curl -sSf -o rustup-init.exe https://win.rustup.rs
    - rustup-init.exe -y --default-toolchain stable
  install_nightly_script: rustup toolchain install nightly
  <<: *TEST_STABLE_TEMPLATE
  <<: *TEST_NIGHTLY_TEMPLATE

# macOS and FreeBSD
task:
  matrix:
    - name: macOS
      osx_instance:
        image: mojave-base
    - name: FreeBSD
      freebsd_instance:
        image: freebsd-12-0-release-amd64
  env:
    PATH: $PATH:$HOME/.cargo/bin
  install_stable_script: curl -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
  install_nightly_script: rustup toolchain install nightly
  <<: *TEST_STABLE_TEMPLATE
  <<: *TEST_NIGHTLY_TEMPLATE
